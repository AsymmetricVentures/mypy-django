# Stubs for django.db.migrations.operations.fields (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from .base import Operation as Operation

class FieldOperation(Operation):
    model_name = ...  # type: Any
    name = ...  # type: Any
    def __init__(self, model_name, name) -> None: ...
    def model_name_lower(self): ...
    def name_lower(self): ...
    def is_same_model_operation(self, operation): ...
    def is_same_field_operation(self, operation): ...
    def references_model(self, name, app_label: Optional[Any] = ...): ...
    def references_field(self, model_name, name, app_label: Optional[Any] = ...): ...
    def reduce(self, operation, in_between, app_label: Optional[Any] = ...): ...

class AddField(FieldOperation):
    field = ...  # type: Any
    preserve_default = ...  # type: Any
    def __init__(self, model_name, name, field, preserve_default: bool = ...) -> None: ...
    def deconstruct(self): ...
    def state_forwards(self, app_label, state): ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state): ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state): ...
    def describe(self): ...
    def reduce(self, operation, in_between, app_label: Optional[Any] = ...): ...

class RemoveField(FieldOperation):
    def deconstruct(self): ...
    def state_forwards(self, app_label, state): ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state): ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state): ...
    def describe(self): ...

class AlterField(FieldOperation):
    field = ...  # type: Any
    preserve_default = ...  # type: Any
    def __init__(self, model_name, name, field, preserve_default: bool = ...) -> None: ...
    def deconstruct(self): ...
    def state_forwards(self, app_label, state): ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state): ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state): ...
    def describe(self): ...
    def reduce(self, operation, in_between, app_label: Optional[Any] = ...): ...

class RenameField(FieldOperation):
    old_name = ...  # type: Any
    new_name = ...  # type: Any
    def __init__(self, model_name, old_name, new_name) -> None: ...
    def old_name_lower(self): ...
    def new_name_lower(self): ...
    def deconstruct(self): ...
    def state_forwards(self, app_label, state): ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state): ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state): ...
    def describe(self): ...
    def references_field(self, model_name, name, app_label: Optional[Any] = ...): ...
    def reduce(self, operation, in_between, app_label: Optional[Any] = ...): ...
