# Stubs for django.utils.datastructures (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import sys
from typing import Any, Optional, Generator, Iterator, KeysView,ItemsView,ValuesView

class OrderedSet:
    dict = ...  # type: Any
    def __init__(self, iterable: Optional[Any] = ...) -> None: ...
    def add(self, item): ...
    def remove(self, item): ...
    def discard(self, item): ...
    def __iter__(self): ...
    def __contains__(self, item): ...
    def __bool__(self): ...
    def __nonzero__(self): ...
    def __len__(self): ...

class MultiValueDictKeyError(KeyError): ...

class MultiValueDict(dict):
    def __init__(self, key_to_list_mapping: Any = ...) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value): ...
    def __copy__(self): ...
    def __deepcopy__(self, memo: Optional[Any] = ...): ...
    def get(self, key, default: Optional[Any] = ...): ...
    def getlist(self, key, default: Optional[Any] = ...): ...
    def setlist(self, key, list_): ...
    def setdefault(self, key, default: Optional[Any] = ...): ...
    def setlistdefault(self, key, default_list: Optional[Any] = ...): ...
    def appendlist(self, key, value): ...
    
    if sys.version_info[0] >= 3:
        def items(self) -> ItemsView[Any, Any]: ...
        def lists(self) -> Iterator[Any]: ...
        def values(self) -> ValuesView[Any]: ...
    else:
        def iteritems(self) -> Generator[Any, Any, Any]: ...
        def iterlists(self) -> Iterator[Any]: ...
        def itervalues(self) -> Generator[Any, Any, Any]: ...
        def items(self) -> List[Any]: ...
        def lists(self) -> List[Any]: ...
        def values(self) -> List[Any]: ...
    def copy(self): ...
    def update(self, *args, **kwargs): ...
    def dict(self): ...

class ImmutableList(tuple):
    warning = ...  # type: Any
    def __new__(cls, *args, **kwargs): ...
    def complain(self, *wargs, **kwargs): ...
    __delitem__ = ...  # type: Any
    __delslice__ = ...  # type: Any
    __iadd__ = ...  # type: Any
    __imul__ = ...  # type: Any
    __setitem__ = ...  # type: Any
    __setslice__ = ...  # type: Any
    append = ...  # type: Any
    extend = ...  # type: Any
    insert = ...  # type: Any
    pop = ...  # type: Any
    remove = ...  # type: Any
    sort = ...  # type: Any
    reverse = ...  # type: Any

class DictWrapper(dict):
    func = ...  # type: Any
    prefix = ...  # type: Any
    def __init__(self, data, func, prefix) -> None: ...
    def __getitem__(self, key): ...
